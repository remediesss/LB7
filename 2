#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>

#define MAX_VERTICES 100 // Максимальное количество вершин

void generate_adjacency_matrix(int n, int matrix[n][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            matrix[i][j] = 0; 
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            int edge = rand() % 2; 
            matrix[i][j] = edge;   
            matrix[j][i] = edge;   
        }
    }
}

void dfs_iterative(int matrix[][MAX_VERTICES], int n, int start_vertex) {
    bool visited[MAX_VERTICES] = {false}; // Массив посещенных вершин
    int stack[MAX_VERTICES]; // Стек для хранения вершин
    int top = -1; // Индекс верхушки стека

    // начинаем с начальной вершины
    stack[++top] = start_vertex;

    while (top != -1) {
        // Извлекаем вершину из стека
        int vertex = stack[top--];

        if (!visited[vertex]) {
            visited[vertex] = true;
            printf("%d ", vertex); 

            // добавляем соседние вершины в стек
            for (int i = n - 1; i >= 0; i--) { // обход в обратном порядке
                if (matrix[vertex][i] == 1 && !visited[i]) {
                    stack[++top] = i;
                }
            }
        }
    }
}

int main() {
    int n; 
    printf("Введите размер матрицы: ");
    scanf("%d", &n);
    
    int matrix[n][n];
    
    srand(time(NULL));

    generate_adjacency_matrix(n, matrix);

    printf("Adjacency Matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }

    printf("Depth-First Search starting from vertex 0:\n");
    dfs_iterative(matrix, n, 0);
    printf("\n");

    return 0;
}
