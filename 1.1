#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>

void generate_adjacency_matrix(int n, int matrix[n][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            matrix[i][j] = 0; 
        }
    }

   
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            int edge = rand() % 2; 
            matrix[i][j] = edge;   
            matrix[j][i] = edge;   
        }
    }
}

void dfs(int matrix[][10], int n, int vertex, bool visited[]) {

    visited[vertex] = true;
    printf("%d ", vertex); 

    for (int i = 0; i < n; i++) {
        if (matrix[vertex][i] == 1 && !visited[i]) {
            dfs(matrix, n, i, visited);
        }
    }
}

int main() {
    int n; 
    printf("Введите размер матрицы: ");
    scanf("%d", &n);
    
    int matrix[n][n];
    bool visited[n];

    for (int i = 0; i < n; i++) {
        visited[i] = false;
    }

    srand(time(NULL));

    generate_adjacency_matrix(n, matrix);

    printf("Adjacency Matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
    
    int start;
    printf("Введите вершину с которой начнется обход: ");
    scanf("%d", &start);
    printf("Поиск в глубину с вершины %d:\n", start);
    dfs(matrix, n, start, visited);
    printf("\n");

    return 0;
}
